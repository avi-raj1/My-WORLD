/*
input: 0 ->dft 1-> inverse dft
input: n -> degree bound of polynimial
input: 2n floating variables representing a_i + j*b_i for ith coefficient of polynomial i={0,1,...n-1}
*/

// assuming n is some power of 2

#include <iostream>   
#include <cstdlib> 
#include <iomanip>
using namespace std;
#include <math.h>

#define PI 3.14159265

struct coplex{
    double re;
    double im;
};

double prodre(coplex a,coplex b)
{
    double ans1,ans2;
    double p1=a.re;
    double p2=a.im;
    double p3=b.re;
    double p4=b.im;
    ans1=p1*p3;
    ans2=p2*p4;
    double ans=ans1-ans2;
    return ans;
}
double prodim(coplex a,coplex b)
{
    double ans1,ans2;
    double p1=a.re;
    double p2=a.im;
    double p3=b.re;
    double p4=b.im;
    ans1=p1*p4;
    ans2=p2*p3;
    double ans=ans1+ans2;
    return ans;
}
double sumre(coplex a,coplex b)
{
    double ans;
    ans=(a.re)+(b.re);
    return ans;
}
double sumim(coplex a,coplex b)
{
    double ans;
    ans=(a.im)+(b.im);
    return ans;
}
double diffre(coplex a,coplex b)
{
    double ans;
    ans=(a.re)-(b.re);
    return ans;
}
double diffim(coplex a,coplex b)
{
    //cout<<"subtracting "<<a.im<<" and "<<b.im;
    double ans;
    ans=(a.im)-(b.im);
    //cout<<"to get "<<ans<<endl;
    return ans;
}
void fft(coplex y[],coplex a[],int n)
{  
    //cout<<"line 65 n is "<<n<<endl;
    if(n==1)
    {
        y[0].re=a[0].re;
        y[0].im=a[0].im;
        return; 
    }
    
    coplex *a_0;
    a_0=(coplex*)malloc((n/2)*sizeof(coplex));

    coplex *a_1;
    a_1=(coplex*)malloc((n/2)*sizeof(coplex));
    
    int i,j=0,k=0;
    for(i=0;i<n;i=i+2)
    {
        a_0[j].re=a[i].re;
        a_0[j].im=a[i].im;
        j++;
    }
    j=0;
    for(i=1;i<n;i=i+2)
    {
        a_1[j].re=a[i].re;
        a_1[j].im=a[i].im;
        j++;
    }
    
    coplex *y_0;
    y_0=(coplex*)malloc((n/2)*sizeof(coplex));

    coplex *y_1;
    y_1=(coplex*)malloc((n/2)*sizeof(coplex));
    
    fft(y_0,a_0,n/2);
    fft(y_1,a_1,n/2);

    
    coplex omega_n;
    
    omega_n.re=cos(2*PI/n);
    omega_n.im=sin(2*PI/n);
    
    coplex go;
    go.re=1.000000;
    go.im=0.000000;
    
    for(i=0;i<n/2;i++)
    {
        
        coplex operand;
        
        operand.re=prodre(go,y_1[i]);
        operand.im=prodim(go,y_1[i]);
        
        y[i].re=sumre(y_0[i],operand);
        y[i].im=sumim(y_0[i],operand);
        
        y[i+n/2].re=diffre(y_0[i],operand);
        y[i+n/2].im=diffim(y_0[i],operand);
        
        coplex go1;
        
        go1.re=prodre(go,omega_n);
        go1.im=prodim(go,omega_n);
        
        go.re=go1.re;
        go.im=go1.im;
    }
    return;
}
void ifft(coplex y[],coplex a[],int n)
{  
    //cout<<"line 65 n is "<<n<<endl;
    if(n==1)
    {
        y[0].re=a[0].re;
        y[0].im=a[0].im;
        return; 
    }
    
    coplex *a_0;
    a_0=(coplex*)malloc((n/2)*sizeof(coplex));

    coplex *a_1;
    a_1=(coplex*)malloc((n/2)*sizeof(coplex));
    
    int i,j=0,k=0;
    for(i=0;i<n;i=i+2)
    {
        a_0[j].re=a[i].re;
        a_0[j].im=a[i].im;
        j++;
    }
    j=0;
    for(i=1;i<n;i=i+2)
    {
        a_1[j].re=a[i].re;
        a_1[j].im=a[i].im;
        j++;
    }
    
    coplex *y_0;
    y_0=(coplex*)malloc((n/2)*sizeof(coplex));

    coplex *y_1;
    y_1=(coplex*)malloc((n/2)*sizeof(coplex));
    
    fft(y_0,a_0,n/2);
    fft(y_1,a_1,n/2);

    
    coplex omega_n;
    
    omega_n.re=cos(2*PI/n);
    omega_n.im=-1*sin(2*PI/n);
    
    coplex go;
    go.re=1.000000;
    go.im=0.000000;
    
    for(i=0;i<n/2;i++)
    {
        
        coplex operand;
        
        operand.re=prodre(go,y_1[i]);
        operand.im=prodim(go,y_1[i]);
        
        y[i].re=sumre(y_0[i],operand);
        y[i].im=sumim(y_0[i],operand);
        
        y[i+n/2].re=diffre(y_0[i],operand);
        y[i+n/2].im=diffim(y_0[i],operand);
        
        coplex go1;
        
        go1.re=prodre(go,omega_n);
        go1.im=prodim(go,omega_n);
        
        go.re=go1.re;
        go.im=go1.im;
    }
    return;
}
int main()
{
    
    int type;
    cin>>type;
    int n,i;
    cin>>n;
    
    cout<<n<<" ";

    coplex *a;
    a=(coplex*)malloc(n*sizeof(coplex));
    
    for(i=0;i<n;i++)
        cin>>a[i].re>>a[i].im;

    coplex *y1;
    y1=(coplex*)malloc(n*sizeof(coplex));
    
    
    if(type==1)
    {
        ifft(y1,a,n);
        for(i=0;i<n;i++)
        {
            if(y1[i].re<0.000001 && y1[i].re>-0.000001)
            cout<<"0 ";
            else
            std::cout << std::fixed << std::setprecision(1) << (y1[i].re)/n<<" ";
            
            if(y1[i].im<0.000001 && y1[i].im>-0.000001)
            cout<<"0 ";
            else
            std::cout << std::fixed << std::setprecision(1) << (y1[i].im)/n<<" ";
        }
    }
    else
    {
        fft(y1,a,n);
        for(i=0;i<n;i++)
        {
            if(y1[i].re<0.000001 && y1[i].re>-0.000001)
            cout<<"0 ";
            else
            std::cout << std::fixed << std::setprecision(1) << y1[i].re<<" ";
            
            if(y1[i].im<0.000001 && y1[i].im>-0.000001)
            cout<<"0 ";
            else
            std::cout << std::fixed << std::setprecision(1) << y1[i].im<<" ";
        }
        
    }
    
    return 0;
}
example input:
0 
2 
1.0 0 1.0 0
output:
2
2.0 0
0 0
